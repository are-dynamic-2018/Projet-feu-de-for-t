import numpy as np
from random import *
import matplotlib.pyplot as plt

L = 15
Matrice  = np.zeros((L,L))
(long,larg) = Matrice.shape
Matrice
def foyer():
    i = randint(1,L-2)
    j = randint(1,L-2)
    Matrice[i,j] = Matrice[i,j] + 1
    return (i, j)
    print(i, j)
    
i,j = foyer()

def propagation(ancienne_matrice, nouvelle_matrice, i,j):
    if ancienne_matrice[i,j] >= 1 :
        nouvelle_matrice[i +1,j] = ancienne_matrice[i +1,j] +1
        nouvelle_matrice[i,j +1] = ancienne_matrice[i,j +1] +1
        nouvelle_matrice[i -1,j] = ancienne_matrice[i -1,j] +1
        nouvelle_matrice[i,j -1] = ancienne_matrice[i,j -1] +1
        nouvelle_matrice[i,j] = 1
    return nouvelle_matrice

def affiche_matrice(Matrice):
    (n,m) = Matrice.shape
    for i in range(n):
        for j in range(m):
            if Matrice[i,j] < 1:
                print("A", end="")
            else:
                print("F", end="")
        print()
def next_step(Matrice, i,j):
    new_mat = np.zeros((L,L))
    for i in range(L-1):
        for j in range(L-1):
            propagation(Matrice, new_mat, i,j)
    affiche_matrice(new_matMatrice)    
    return new_mat
def simulation(Matrice):
    nb_pas = 20
    affiche_matrice(Matrice)
    print("")
    for i in range (nb_pas):
        Matrice = next_step(Matrice,i,j)
        print("")
simulation(Matrice)    
    
    
    
    
    
    
    nouvelle_matrice[i +(Ventx+Venty),j] = ancienne_matrice[i +(Ventx+Venty),j] +1
    nouvelle_matrice[i -(Ventx+Venty),j] = ancienne_matrice[i -(Ventx+Venty),j] +1
    nouvelle_matrice[i,j +(Ventx+Venty)] = ancienne_matrice[i,j +(Ventx+Venty)] +1
    nouvelle_matrice[i,j -(Ventx+Venty)] = ancienne_matrice[i,j -(Ventx+Venty)] +1
    nouvelle_matrice[i +(Ventx+Venty),j+(Ventx+Venty)] = ancienne_matrice[i +(Ventx+Venty),j+(Ventx+Venty)] +1
    nouvelle_matrice[i -(Ventx+Venty),j-(Ventx+Venty)] = ancienne_matrice[i -(Ventx+Venty),j-(Ventx+Venty)] +1
    nouvelle_matrice[i +(Ventx+Venty),j-(Ventx+Venty)] = ancienne_matrice[i +(Ventx+Venty),j-(Ventx+Venty)] +1
    nouvelle_matrice[i -(Ventx+Venty),j+(Ventx+Venty)] = ancienne_matrice[i -(Ventx+Venty),j+(Ventx+Venty)] +1
    
    %matplotlib notebook
from pylab import *
import numpy as np

def simulation(Matrice):
    nb_pas = 20
    affiche_matrice(Matrice)
    print("")
    for k in range (nb_pas):
        Matrice = next_step(Matrice)
        affiche_matrice(Matrice)
        print("")
simulation(Matrice)

import matplotlib.pyplot as plt
size = np.array(Matrice.shape)
dpi = 20
figsize= size[1]/float(dpi),size[0]/float(dpi)
fig = plt.figure(figsize = figsize, dpi = dpi, facecolor = "white")
fig.add_axes([0.0, 0.0, 1.0, 1.0], frameon = False)
im=plt.imshow(cells, interpolation = 'nearest', cmap = plt.cm.gray_r)
plt.xticks([]), plt.yticks([])

import matplotlib.animation as animation

def update(*args):
    simulation(Matrice)
    im.set_array(Matrice)
    return [im]

ani = animation.FuncAnimation(fig, update, frames=range(20), interval=50)
plt.show()
    
    
    
    
    L'animation de la simulation
    
    # Modifier la fonction Simulation
    
    def simulation(Matrice):
    nb_pas = 1000
    history = []
    history.append(Matrice.copy())
    affiche_matrice(Matrice)
    print("")
    for k in range (nb_pas):
        Matrice = next_step(Matrice)
        history.append(Matrice.copy())

        affiche_matrice(Matrice)
        print("")
    return history
    
    simulation(Matrice)
    
    #premier visualisation
    
    import matplotlib.pyplot as plt
    import matplotlib.animation as anim
    from IPython.display import HTML
    import numpy as np
    %matplotlib notebook
    %matplotlib notebook
    
    results = simulation(Matrice)
    
    results
    
    fig = plt.figure()
    im=plt.imshow(results[0], interpolation = 'none', cmap = plt.cm.gray_r)
    plt.xticks([]), plt.yticks([])
    
    len(results)
    
    def update(i):
    im.set_array(results[i])
    return [im]

    ani = anim.FuncAnimation(fig, update, interval=300)
    plt.show()
    
    from matplotlib.colors import ListedColormap, Normalize
    
    colors = ["blue",   #gris (cendre)
          "green",   # bleu (espace d'eau)
          "red",  # Vert (espace d'eau)
          "grey"]    # Rouge (enfeu)
    cmap = ListedColormap(colors)
    
    fig = plt.figure()
    norm = Normalize(vmin = -1, vmax = 2, clip = False)
    im=plt.imshow(results[0], interpolation = 'nearest',
              cmap = cmap,
              norm = norm)
    plt.xticks([]), plt.yticks([])
    
    results
    
    def update(i):
    im.set_array(results[i])
    return [im]

    ani = anim.FuncAnimation(fig, update, interval=300)
    plt.show()
    
    import matplotlib.patches as mpatches
    
    couleur_saint = "green"
    couleur_enfeu = "red"
    couleur_cendre = "grey"
    colors = ["blue",couleur_saint, couleur_saint,couleur_enfeu, couleur_cendre]
    cmap = ListedColormap(colors)
    patch1 = mpatches.Patch(color=couleur_saint, label='saint')
    patch2 = mpatches.Patch(color=couleur_cendre, label='cendre')
    patch3 = mpatches.Patch(color=couleur_enfeu, label='enfeu')
    
    fig = plt.figure()
    norm = Normalize(vmin = -1, vmax = 2, clip = False)
    im=plt.imshow(results[0], interpolation = 'nearest',
              cmap = cmap,
              norm = norm)
    plt.xticks([]), plt.yticks([])
    plt.title("Simulation d'une feu de foret")
    plt.legend(handles=[patch1, patch2, patch3],bbox_to_anchor=(1, 1, 0., 0), loc="upper left")
    
    def update(i):
    im.set_array(results[i])
    return [im]

    ani = anim.FuncAnimation(fig, update, interval=300)
    plt.show()



    
    
    
    
    
    
    
