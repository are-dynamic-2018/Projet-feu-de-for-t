import numpy as np
from random import *
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

L = 20

vent = randint(1,4)

NORDx  = -1
NORDy  = 0

SUDx   = 1
SUDy   = 0

ESTx   = 0
ESTy   = 1

OUESTx = 0
OUESTy = -1

if vent == 1 :
    Ventx  = NORDx 
    Venty  = NORDy
    print('le vent va vers le nord')
    
if vent == 2 :
    Ventx  = SUDx 
    Venty  = SUDy
    print('le vent va vers le sud')
    
if vent == 3 :
    Ventx  = OUESTx 
    Venty  = OUESTy
    print('le vent va vers l ouest')

if vent == 4 : 
    Ventx  = ESTx 
    Venty  = ESTy
    print('le vent va vers l est')


Matrice  = np.zeros((L,L))
(long,larg) = Matrice.shape
Matrice

def foyer():
    i = randint(2,L-2)
    j = randint(2,L-2)
    Matrice[i,j] = Matrice[i,j] + 1
    return (i, j)
    print(i, j)

def case_neutre(Matrice,i,j):
    for h in range(35):
        i_ = randint(2,L-2)
        j_ = randint(2,L-2)
        if i != i_ and j!= j_ :
            Matrice[i_,j_] = -1

def proba_feu(rayon, alpha=1.0):
    p = 1.0 / ((1.0 + rayon) ** alpha)
    return p
    
   
r_min = 0.0
r_max = 2.0
rayons = np.linspace(r_min, r_max, num=20)
probas_feu = np.array([proba_feu(r) for r in rayons])

plt.plot(rayons, probas_feu)
plt.xlabel("rayon")
plt.ylabel("proba")

plt.show()


def filter_proba(p):
    p = p
    return p
    
    
    
def matrice_proba(ventx, venty):
    p = np.zeros((3, 3))
    i_0, j_0 = 0.75, 1.0
    # i_1, j_1 = ?, ?  # dépend de ventx venty
    for i in range(0, 3):
        for j in range(0, 3):
            rayon = np.sqrt((i - i_0)**2 + (j - j_0)**2)
            p[i, j] = proba_feu(rayon)
    return p
    
    
    
p = matrice_proba(0.0, 0.0)
print(p)




for i in range(10):
    x = np.random.binomial(1,1/3)
    print(x)

    
    
def propa(ancienne_matrice,nouvelle_matrice,p,i,j):
    nouvelle_matrice[i,j] = ancienne_matrice[i,j]  # Copier l'ancienne matrice dans la nouvell
    if nouvelle_matrice[i,j] == 1:  # i.e. elle est en feu
        for di in [-1, 0 ,+1]:
            for dj in [-1, 0,+1]:
                if nouvelle_matrice[i+di,j+ dj] == 0: # si arbre sain
                    x = np.random.binomial(1, p[di +1,dj +1])
                    nouvelle_matrice[i+di,j+dj] = x
                    nouvelle_matrice[i,j] = nouvelle_matrice[i,j] + (1/2)
    return nouvelle_matrice
    
    
   

def propagation_vide(ancienne_matrice, nouvelle_matrice, i, j):
    assert ancienne_matrice[i,j] < 0, "Cette fonction ne doit être appelée que pour des cases vides"
    nouvelle_matrice[i,j] = ancienne_matrice[i,j]
    return nouvelle_matrice



def affiche_matrice(Matrice):
    (n,m) = Matrice.shape
    for i in range(2,n-1) :
        for j in range(2,m-1) :
            if Matrice[i,j] ==0 :
                print("A", end="")
            elif Matrice[i, j] >= 1 and Matrice[i, j] < 2 :
                print("F", end="")
            elif Matrice[i, j] >= 2 :
                print(".", end="")
            elif Matrice[i,j] < 0 :
                print(" ",end="")
        print("")
        
        
   
def next_step(Matrice):
    new_mat = np.zeros((L,L))
    for i in range(2,L-1):
        for j in range(2,L-1):
            
            propagation_feu(Matrice, new_mat, i, j)
           
    return new_mat
  
 
    
   
Matrice  = np.zeros((L,L))
(long,larg) = Matrice.shape
i,j = foyer()
case_neutre(Matrice,i,j)
def simulation(Matrice):
    nb_pas = 30
    affiche_matrice(Matrice)
    print("")
    for k in range (nb_pas):
        Matrice = next_step(Matrice)
        affiche_matrice(Matrice)
        print("")
simulation(Matrice)  


